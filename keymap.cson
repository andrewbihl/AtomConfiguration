# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
'body':
  # Code folding
  'alt-cmd-left': 'editor:fold-current-row'
  'alt-cmd-right': 'editor:unfold-current-row'
  'alt-cmd-shift-left': 'editor:fold-all'
  'alt-cmd-shift-right': 'editor:unfold-all'
  # Navigation
  'ctrl-tab': 'pane:show-next-item'
  'ctrl-shift-tab': 'pane:show-previous-item'
  'ctrl-tab ^ctrl': 'unset!'
  'ctrl-shift-tab ^ctrl': 'unset!'
  'ctrl-`': 'platformio-ide-terminal:toggle'

'.platform-darwin':
  'cmd-shift-o': 'fuzzy-finder:toggle-file-finder'

# Terminal
'.platform-darwin atom-workspace':
  'cmd-t': 'platformio-ide-terminal:toggle'
  'shift-cmd-X': 'platformio-ide-terminal:close-all'
  'ctrl-`': 'unset!'

'.platform-darwin .platformio-ide-terminal .terminal':
  'ctrl-tab': 'platformio-ide-terminal:toggle'
  'ctrl-shift-tab': 'platformio-ide-terminal:toggle'

# go-plus
'atom-text-editor[data-grammar~="go"]:not([mini])':
  'cmd-g': 'golang:toggle-panel'

'atom-workspace, .golang-panel':
  'cmd-g': 'golang:toggle-panel'
